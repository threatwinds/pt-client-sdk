// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pentest.proto

package pt_client_sdk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PentestService_PentestStream_FullMethodName = "/pentest.PentestService/PentestStream"
)

// PentestServiceClient is the client API for PentestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Bidirectional streaming service
type PentestServiceClient interface {
	PentestStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientRequest, ServerResponse], error)
}

type pentestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPentestServiceClient(cc grpc.ClientConnInterface) PentestServiceClient {
	return &pentestServiceClient{cc}
}

func (c *pentestServiceClient) PentestStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientRequest, ServerResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PentestService_ServiceDesc.Streams[0], PentestService_PentestStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientRequest, ServerResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PentestService_PentestStreamClient = grpc.BidiStreamingClient[ClientRequest, ServerResponse]

// PentestServiceServer is the server API for PentestService service.
// All implementations must embed UnimplementedPentestServiceServer
// for forward compatibility.
//
// Bidirectional streaming service
type PentestServiceServer interface {
	PentestStream(grpc.BidiStreamingServer[ClientRequest, ServerResponse]) error
	mustEmbedUnimplementedPentestServiceServer()
}

// UnimplementedPentestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPentestServiceServer struct{}

func (UnimplementedPentestServiceServer) PentestStream(grpc.BidiStreamingServer[ClientRequest, ServerResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PentestStream not implemented")
}
func (UnimplementedPentestServiceServer) mustEmbedUnimplementedPentestServiceServer() {}
func (UnimplementedPentestServiceServer) testEmbeddedByValue()                        {}

// UnsafePentestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PentestServiceServer will
// result in compilation errors.
type UnsafePentestServiceServer interface {
	mustEmbedUnimplementedPentestServiceServer()
}

func RegisterPentestServiceServer(s grpc.ServiceRegistrar, srv PentestServiceServer) {
	// If the following call pancis, it indicates UnimplementedPentestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PentestService_ServiceDesc, srv)
}

func _PentestService_PentestStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PentestServiceServer).PentestStream(&grpc.GenericServerStream[ClientRequest, ServerResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PentestService_PentestStreamServer = grpc.BidiStreamingServer[ClientRequest, ServerResponse]

// PentestService_ServiceDesc is the grpc.ServiceDesc for PentestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PentestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pentest.PentestService",
	HandlerType: (*PentestServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PentestStream",
			Handler:       _PentestService_PentestStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pentest.proto",
}
