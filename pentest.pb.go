// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: pentest.proto

package pt_client_sdk

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enums
type Scope int32

const (
	Scope_SCOPE_UNSPECIFIED Scope = 0
	Scope_HOLISTIC          Scope = 1
	Scope_TARGETED          Scope = 2
)

// Enum value maps for Scope.
var (
	Scope_name = map[int32]string{
		0: "SCOPE_UNSPECIFIED",
		1: "HOLISTIC",
		2: "TARGETED",
	}
	Scope_value = map[string]int32{
		"SCOPE_UNSPECIFIED": 0,
		"HOLISTIC":          1,
		"TARGETED":          2,
	}
)

func (x Scope) Enum() *Scope {
	p := new(Scope)
	*p = x
	return p
}

func (x Scope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Scope) Descriptor() protoreflect.EnumDescriptor {
	return file_pentest_proto_enumTypes[0].Descriptor()
}

func (Scope) Type() protoreflect.EnumType {
	return &file_pentest_proto_enumTypes[0]
}

func (x Scope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Scope.Descriptor instead.
func (Scope) EnumDescriptor() ([]byte, []int) {
	return file_pentest_proto_rawDescGZIP(), []int{0}
}

type Type int32

const (
	Type_TYPE_UNSPECIFIED Type = 0
	Type_BLACK_BOX        Type = 1
	Type_WHITE_BOX        Type = 2
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "BLACK_BOX",
		2: "WHITE_BOX",
	}
	Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"BLACK_BOX":        1,
		"WHITE_BOX":        2,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_pentest_proto_enumTypes[1].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_pentest_proto_enumTypes[1]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_pentest_proto_rawDescGZIP(), []int{1}
}

type Style int32

const (
	Style_STYLE_UNSPECIFIED Style = 0
	Style_AGGRESSIVE        Style = 1
	Style_SAFE              Style = 2
)

// Enum value maps for Style.
var (
	Style_name = map[int32]string{
		0: "STYLE_UNSPECIFIED",
		1: "AGGRESSIVE",
		2: "SAFE",
	}
	Style_value = map[string]int32{
		"STYLE_UNSPECIFIED": 0,
		"AGGRESSIVE":        1,
		"SAFE":              2,
	}
)

func (x Style) Enum() *Style {
	p := new(Style)
	*p = x
	return p
}

func (x Style) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Style) Descriptor() protoreflect.EnumDescriptor {
	return file_pentest_proto_enumTypes[2].Descriptor()
}

func (Style) Type() protoreflect.EnumType {
	return &file_pentest_proto_enumTypes[2]
}

func (x Style) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Style.Descriptor instead.
func (Style) EnumDescriptor() ([]byte, []int) {
	return file_pentest_proto_rawDescGZIP(), []int{2}
}

type Status int32

const (
	Status_STATUS_UNSPECIFIED Status = 0
	Status_PENDING            Status = 1
	Status_IN_PROGRESS        Status = 2
	Status_COMPLETED          Status = 3
	Status_FAILED             Status = 4
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "PENDING",
		2: "IN_PROGRESS",
		3: "COMPLETED",
		4: "FAILED",
	}
	Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"PENDING":            1,
		"IN_PROGRESS":        2,
		"COMPLETED":          3,
		"FAILED":             4,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_pentest_proto_enumTypes[3].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_pentest_proto_enumTypes[3]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_pentest_proto_rawDescGZIP(), []int{3}
}

type Phase int32

const (
	Phase_PHASE_UNSPECIFIED Phase = 0
	Phase_RECON             Phase = 1
	Phase_INITIAL_EXPLOIT   Phase = 2
	Phase_DEEP_EXPLOIT      Phase = 3
	Phase_LATERAL_MOVEMENT  Phase = 4
	Phase_REPORT            Phase = 5
)

// Enum value maps for Phase.
var (
	Phase_name = map[int32]string{
		0: "PHASE_UNSPECIFIED",
		1: "RECON",
		2: "INITIAL_EXPLOIT",
		3: "DEEP_EXPLOIT",
		4: "LATERAL_MOVEMENT",
		5: "REPORT",
	}
	Phase_value = map[string]int32{
		"PHASE_UNSPECIFIED": 0,
		"RECON":             1,
		"INITIAL_EXPLOIT":   2,
		"DEEP_EXPLOIT":      3,
		"LATERAL_MOVEMENT":  4,
		"REPORT":            5,
	}
)

func (x Phase) Enum() *Phase {
	p := new(Phase)
	*p = x
	return p
}

func (x Phase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Phase) Descriptor() protoreflect.EnumDescriptor {
	return file_pentest_proto_enumTypes[4].Descriptor()
}

func (Phase) Type() protoreflect.EnumType {
	return &file_pentest_proto_enumTypes[4]
}

func (x Phase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Phase.Descriptor instead.
func (Phase) EnumDescriptor() ([]byte, []int) {
	return file_pentest_proto_rawDescGZIP(), []int{4}
}

type UpdateType int32

const (
	UpdateType_UPDATE_TYPE_UNSPECIFIED UpdateType = 0
	UpdateType_INFO                    UpdateType = 1
	UpdateType_ERROR                   UpdateType = 2
	UpdateType_STATUS                  UpdateType = 3
	UpdateType_DEBUG                   UpdateType = 4
)

// Enum value maps for UpdateType.
var (
	UpdateType_name = map[int32]string{
		0: "UPDATE_TYPE_UNSPECIFIED",
		1: "INFO",
		2: "ERROR",
		3: "STATUS",
		4: "DEBUG",
	}
	UpdateType_value = map[string]int32{
		"UPDATE_TYPE_UNSPECIFIED": 0,
		"INFO":                    1,
		"ERROR":                   2,
		"STATUS":                  3,
		"DEBUG":                   4,
	}
)

func (x UpdateType) Enum() *UpdateType {
	p := new(UpdateType)
	*p = x
	return p
}

func (x UpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_pentest_proto_enumTypes[5].Descriptor()
}

func (UpdateType) Type() protoreflect.EnumType {
	return &file_pentest_proto_enumTypes[5]
}

func (x UpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateType.Descriptor instead.
func (UpdateType) EnumDescriptor() ([]byte, []int) {
	return file_pentest_proto_rawDescGZIP(), []int{5}
}

// Request messages sent by client
type ClientRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to RequestType:
	//
	//	*ClientRequest_GetPentest
	//	*ClientRequest_SchedulePentest
	RequestType   isClientRequest_RequestType `protobuf_oneof:"request_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientRequest) Reset() {
	*x = ClientRequest{}
	mi := &file_pentest_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRequest) ProtoMessage() {}

func (x *ClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pentest_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRequest.ProtoReflect.Descriptor instead.
func (*ClientRequest) Descriptor() ([]byte, []int) {
	return file_pentest_proto_rawDescGZIP(), []int{0}
}

func (x *ClientRequest) GetRequestType() isClientRequest_RequestType {
	if x != nil {
		return x.RequestType
	}
	return nil
}

func (x *ClientRequest) GetGetPentest() *GetPentestRequest {
	if x != nil {
		if x, ok := x.RequestType.(*ClientRequest_GetPentest); ok {
			return x.GetPentest
		}
	}
	return nil
}

func (x *ClientRequest) GetSchedulePentest() *SchedulePentestRequest {
	if x != nil {
		if x, ok := x.RequestType.(*ClientRequest_SchedulePentest); ok {
			return x.SchedulePentest
		}
	}
	return nil
}

type isClientRequest_RequestType interface {
	isClientRequest_RequestType()
}

type ClientRequest_GetPentest struct {
	GetPentest *GetPentestRequest `protobuf:"bytes,1,opt,name=get_pentest,json=getPentest,proto3,oneof"`
}

type ClientRequest_SchedulePentest struct {
	SchedulePentest *SchedulePentestRequest `protobuf:"bytes,2,opt,name=schedule_pentest,json=schedulePentest,proto3,oneof"`
}

func (*ClientRequest_GetPentest) isClientRequest_RequestType() {}

func (*ClientRequest_SchedulePentest) isClientRequest_RequestType() {}

// Response messages sent by server
type ServerResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ResponseType:
	//
	//	*ServerResponse_PentestData
	//	*ServerResponse_ScheduleResponse
	//	*ServerResponse_StatusUpdate
	//	*ServerResponse_Error
	ResponseType  isServerResponse_ResponseType `protobuf_oneof:"response_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerResponse) Reset() {
	*x = ServerResponse{}
	mi := &file_pentest_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerResponse) ProtoMessage() {}

func (x *ServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pentest_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerResponse.ProtoReflect.Descriptor instead.
func (*ServerResponse) Descriptor() ([]byte, []int) {
	return file_pentest_proto_rawDescGZIP(), []int{1}
}

func (x *ServerResponse) GetResponseType() isServerResponse_ResponseType {
	if x != nil {
		return x.ResponseType
	}
	return nil
}

func (x *ServerResponse) GetPentestData() *PentestData {
	if x != nil {
		if x, ok := x.ResponseType.(*ServerResponse_PentestData); ok {
			return x.PentestData
		}
	}
	return nil
}

func (x *ServerResponse) GetScheduleResponse() *ScheduleResponse {
	if x != nil {
		if x, ok := x.ResponseType.(*ServerResponse_ScheduleResponse); ok {
			return x.ScheduleResponse
		}
	}
	return nil
}

func (x *ServerResponse) GetStatusUpdate() *StatusUpdate {
	if x != nil {
		if x, ok := x.ResponseType.(*ServerResponse_StatusUpdate); ok {
			return x.StatusUpdate
		}
	}
	return nil
}

func (x *ServerResponse) GetError() *ErrorResponse {
	if x != nil {
		if x, ok := x.ResponseType.(*ServerResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isServerResponse_ResponseType interface {
	isServerResponse_ResponseType()
}

type ServerResponse_PentestData struct {
	PentestData *PentestData `protobuf:"bytes,1,opt,name=pentest_data,json=pentestData,proto3,oneof"`
}

type ServerResponse_ScheduleResponse struct {
	ScheduleResponse *ScheduleResponse `protobuf:"bytes,2,opt,name=schedule_response,json=scheduleResponse,proto3,oneof"`
}

type ServerResponse_StatusUpdate struct {
	StatusUpdate *StatusUpdate `protobuf:"bytes,3,opt,name=status_update,json=statusUpdate,proto3,oneof"`
}

type ServerResponse_Error struct {
	Error *ErrorResponse `protobuf:"bytes,5,opt,name=error,proto3,oneof"`
}

func (*ServerResponse_PentestData) isServerResponse_ResponseType() {}

func (*ServerResponse_ScheduleResponse) isServerResponse_ResponseType() {}

func (*ServerResponse_StatusUpdate) isServerResponse_ResponseType() {}

func (*ServerResponse_Error) isServerResponse_ResponseType() {}

// Get pentest by ID
type GetPentestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PentestId     string                 `protobuf:"bytes,1,opt,name=pentest_id,json=pentestId,proto3" json:"pentest_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPentestRequest) Reset() {
	*x = GetPentestRequest{}
	mi := &file_pentest_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPentestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPentestRequest) ProtoMessage() {}

func (x *GetPentestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pentest_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPentestRequest.ProtoReflect.Descriptor instead.
func (*GetPentestRequest) Descriptor() ([]byte, []int) {
	return file_pentest_proto_rawDescGZIP(), []int{2}
}

func (x *GetPentestRequest) GetPentestId() string {
	if x != nil {
		return x.PentestId
	}
	return ""
}

// Schedule a new pentest
type SchedulePentestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Style         Style                  `protobuf:"varint,2,opt,name=style,proto3,enum=pentest.Style" json:"style,omitempty"`
	Exploit       bool                   `protobuf:"varint,3,opt,name=exploit,proto3" json:"exploit,omitempty"`
	Targets       []*TargetRequest       `protobuf:"bytes,4,rep,name=targets,proto3" json:"targets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SchedulePentestRequest) Reset() {
	*x = SchedulePentestRequest{}
	mi := &file_pentest_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchedulePentestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulePentestRequest) ProtoMessage() {}

func (x *SchedulePentestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pentest_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulePentestRequest.ProtoReflect.Descriptor instead.
func (*SchedulePentestRequest) Descriptor() ([]byte, []int) {
	return file_pentest_proto_rawDescGZIP(), []int{3}
}

func (x *SchedulePentestRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *SchedulePentestRequest) GetStyle() Style {
	if x != nil {
		return x.Style
	}
	return Style_STYLE_UNSPECIFIED
}

func (x *SchedulePentestRequest) GetExploit() bool {
	if x != nil {
		return x.Exploit
	}
	return false
}

func (x *SchedulePentestRequest) GetTargets() []*TargetRequest {
	if x != nil {
		return x.Targets
	}
	return nil
}

type TargetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Target        string                 `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Scope         Scope                  `protobuf:"varint,3,opt,name=scope,proto3,enum=pentest.Scope" json:"scope,omitempty"`
	Type          Type                   `protobuf:"varint,4,opt,name=type,proto3,enum=pentest.Type" json:"type,omitempty"`
	Credentials   *string                `protobuf:"bytes,5,opt,name=credentials,proto3,oneof" json:"credentials,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TargetRequest) Reset() {
	*x = TargetRequest{}
	mi := &file_pentest_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetRequest) ProtoMessage() {}

func (x *TargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pentest_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetRequest.ProtoReflect.Descriptor instead.
func (*TargetRequest) Descriptor() ([]byte, []int) {
	return file_pentest_proto_rawDescGZIP(), []int{4}
}

func (x *TargetRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *TargetRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *TargetRequest) GetScope() Scope {
	if x != nil {
		return x.Scope
	}
	return Scope_SCOPE_UNSPECIFIED
}

func (x *TargetRequest) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_TYPE_UNSPECIFIED
}

func (x *TargetRequest) GetCredentials() string {
	if x != nil && x.Credentials != nil {
		return *x.Credentials
	}
	return ""
}

// Schedule response
type ScheduleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PentestId     string                 `protobuf:"bytes,1,opt,name=pentest_id,json=pentestId,proto3" json:"pentest_id,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleResponse) Reset() {
	*x = ScheduleResponse{}
	mi := &file_pentest_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleResponse) ProtoMessage() {}

func (x *ScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pentest_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleResponse.ProtoReflect.Descriptor instead.
func (*ScheduleResponse) Descriptor() ([]byte, []int) {
	return file_pentest_proto_rawDescGZIP(), []int{5}
}

func (x *ScheduleResponse) GetPentestId() string {
	if x != nil {
		return x.PentestId
	}
	return ""
}

func (x *ScheduleResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Pentest data (full pentest object)
type PentestData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status        Status                 `protobuf:"varint,2,opt,name=status,proto3,enum=pentest.Status" json:"status,omitempty"`
	CreatedAt     *string                `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	StartedAt     *string                `protobuf:"bytes,4,opt,name=started_at,json=startedAt,proto3,oneof" json:"started_at,omitempty"`
	FinishedAt    *string                `protobuf:"bytes,5,opt,name=finished_at,json=finishedAt,proto3,oneof" json:"finished_at,omitempty"`
	Style         Style                  `protobuf:"varint,6,opt,name=style,proto3,enum=pentest.Style" json:"style,omitempty"`
	Exploit       bool                   `protobuf:"varint,7,opt,name=exploit,proto3" json:"exploit,omitempty"`
	Summary       *string                `protobuf:"bytes,8,opt,name=summary,proto3,oneof" json:"summary,omitempty"`
	Targets       []*TargetData          `protobuf:"bytes,9,rep,name=targets,proto3" json:"targets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PentestData) Reset() {
	*x = PentestData{}
	mi := &file_pentest_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PentestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PentestData) ProtoMessage() {}

func (x *PentestData) ProtoReflect() protoreflect.Message {
	mi := &file_pentest_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PentestData.ProtoReflect.Descriptor instead.
func (*PentestData) Descriptor() ([]byte, []int) {
	return file_pentest_proto_rawDescGZIP(), []int{6}
}

func (x *PentestData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PentestData) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_UNSPECIFIED
}

func (x *PentestData) GetCreatedAt() string {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return ""
}

func (x *PentestData) GetStartedAt() string {
	if x != nil && x.StartedAt != nil {
		return *x.StartedAt
	}
	return ""
}

func (x *PentestData) GetFinishedAt() string {
	if x != nil && x.FinishedAt != nil {
		return *x.FinishedAt
	}
	return ""
}

func (x *PentestData) GetStyle() Style {
	if x != nil {
		return x.Style
	}
	return Style_STYLE_UNSPECIFIED
}

func (x *PentestData) GetExploit() bool {
	if x != nil {
		return x.Exploit
	}
	return false
}

func (x *PentestData) GetSummary() string {
	if x != nil && x.Summary != nil {
		return *x.Summary
	}
	return ""
}

func (x *PentestData) GetTargets() []*TargetData {
	if x != nil {
		return x.Targets
	}
	return nil
}

type TargetData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PentestId     string                 `protobuf:"bytes,2,opt,name=pentest_id,json=pentestId,proto3" json:"pentest_id,omitempty"`
	Target        string                 `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Scope         Scope                  `protobuf:"varint,4,opt,name=scope,proto3,enum=pentest.Scope" json:"scope,omitempty"`
	Type          Type                   `protobuf:"varint,5,opt,name=type,proto3,enum=pentest.Type" json:"type,omitempty"`
	Status        Status                 `protobuf:"varint,6,opt,name=status,proto3,enum=pentest.Status" json:"status,omitempty"`
	Phase         *Phase                 `protobuf:"varint,7,opt,name=phase,proto3,enum=pentest.Phase,oneof" json:"phase,omitempty"`
	CreatedAt     *string                `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	StartedAt     *string                `protobuf:"bytes,9,opt,name=started_at,json=startedAt,proto3,oneof" json:"started_at,omitempty"`
	FinishedAt    *string                `protobuf:"bytes,10,opt,name=finished_at,json=finishedAt,proto3,oneof" json:"finished_at,omitempty"`
	Credentials   *string                `protobuf:"bytes,11,opt,name=credentials,proto3,oneof" json:"credentials,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TargetData) Reset() {
	*x = TargetData{}
	mi := &file_pentest_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TargetData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetData) ProtoMessage() {}

func (x *TargetData) ProtoReflect() protoreflect.Message {
	mi := &file_pentest_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetData.ProtoReflect.Descriptor instead.
func (*TargetData) Descriptor() ([]byte, []int) {
	return file_pentest_proto_rawDescGZIP(), []int{7}
}

func (x *TargetData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TargetData) GetPentestId() string {
	if x != nil {
		return x.PentestId
	}
	return ""
}

func (x *TargetData) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *TargetData) GetScope() Scope {
	if x != nil {
		return x.Scope
	}
	return Scope_SCOPE_UNSPECIFIED
}

func (x *TargetData) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_TYPE_UNSPECIFIED
}

func (x *TargetData) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_UNSPECIFIED
}

func (x *TargetData) GetPhase() Phase {
	if x != nil && x.Phase != nil {
		return *x.Phase
	}
	return Phase_PHASE_UNSPECIFIED
}

func (x *TargetData) GetCreatedAt() string {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return ""
}

func (x *TargetData) GetStartedAt() string {
	if x != nil && x.StartedAt != nil {
		return *x.StartedAt
	}
	return ""
}

func (x *TargetData) GetFinishedAt() string {
	if x != nil && x.FinishedAt != nil {
		return *x.FinishedAt
	}
	return ""
}

func (x *TargetData) GetCredentials() string {
	if x != nil && x.Credentials != nil {
		return *x.Credentials
	}
	return ""
}

// Status update (broadcasted when pentest/target status changes)
type StatusUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          UpdateType             `protobuf:"varint,1,opt,name=type,proto3,enum=pentest.UpdateType" json:"type,omitempty"`
	PentestId     string                 `protobuf:"bytes,2,opt,name=pentest_id,json=pentestId,proto3" json:"pentest_id,omitempty"`
	Message       *string                `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Data          *PentestData           `protobuf:"bytes,4,opt,name=data,proto3,oneof" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusUpdate) Reset() {
	*x = StatusUpdate{}
	mi := &file_pentest_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusUpdate) ProtoMessage() {}

func (x *StatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pentest_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusUpdate.ProtoReflect.Descriptor instead.
func (*StatusUpdate) Descriptor() ([]byte, []int) {
	return file_pentest_proto_rawDescGZIP(), []int{8}
}

func (x *StatusUpdate) GetType() UpdateType {
	if x != nil {
		return x.Type
	}
	return UpdateType_UPDATE_TYPE_UNSPECIFIED
}

func (x *StatusUpdate) GetPentestId() string {
	if x != nil {
		return x.PentestId
	}
	return ""
}

func (x *StatusUpdate) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *StatusUpdate) GetData() *PentestData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Error response
type ErrorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         string                 `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Details       string                 `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	mi := &file_pentest_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pentest_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_pentest_proto_rawDescGZIP(), []int{9}
}

func (x *ErrorResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ErrorResponse) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

var File_pentest_proto protoreflect.FileDescriptor

const file_pentest_proto_rawDesc = "" +
	"\n" +
	"\rpentest.proto\x12\apentest\"\xac\x01\n" +
	"\rClientRequest\x12=\n" +
	"\vget_pentest\x18\x01 \x01(\v2\x1a.pentest.GetPentestRequestH\x00R\n" +
	"getPentest\x12L\n" +
	"\x10schedule_pentest\x18\x02 \x01(\v2\x1f.pentest.SchedulePentestRequestH\x00R\x0fschedulePentestB\x0e\n" +
	"\frequest_type\"\x94\x02\n" +
	"\x0eServerResponse\x129\n" +
	"\fpentest_data\x18\x01 \x01(\v2\x14.pentest.PentestDataH\x00R\vpentestData\x12H\n" +
	"\x11schedule_response\x18\x02 \x01(\v2\x19.pentest.ScheduleResponseH\x00R\x10scheduleResponse\x12<\n" +
	"\rstatus_update\x18\x03 \x01(\v2\x15.pentest.StatusUpdateH\x00R\fstatusUpdate\x12.\n" +
	"\x05error\x18\x05 \x01(\v2\x16.pentest.ErrorResponseH\x00R\x05errorB\x0f\n" +
	"\rresponse_type\"2\n" +
	"\x11GetPentestRequest\x12\x1d\n" +
	"\n" +
	"pentest_id\x18\x01 \x01(\tR\tpentestId\"\xa6\x01\n" +
	"\x16SchedulePentestRequest\x12\x13\n" +
	"\x02id\x18\x01 \x01(\tH\x00R\x02id\x88\x01\x01\x12$\n" +
	"\x05style\x18\x02 \x01(\x0e2\x0e.pentest.StyleR\x05style\x12\x18\n" +
	"\aexploit\x18\x03 \x01(\bR\aexploit\x120\n" +
	"\atargets\x18\x04 \x03(\v2\x16.pentest.TargetRequestR\atargetsB\x05\n" +
	"\x03_id\"\xc3\x01\n" +
	"\rTargetRequest\x12\x13\n" +
	"\x02id\x18\x01 \x01(\tH\x00R\x02id\x88\x01\x01\x12\x16\n" +
	"\x06target\x18\x02 \x01(\tR\x06target\x12$\n" +
	"\x05scope\x18\x03 \x01(\x0e2\x0e.pentest.ScopeR\x05scope\x12!\n" +
	"\x04type\x18\x04 \x01(\x0e2\r.pentest.TypeR\x04type\x12%\n" +
	"\vcredentials\x18\x05 \x01(\tH\x01R\vcredentials\x88\x01\x01B\x05\n" +
	"\x03_idB\x0e\n" +
	"\f_credentials\"K\n" +
	"\x10ScheduleResponse\x12\x1d\n" +
	"\n" +
	"pentest_id\x18\x01 \x01(\tR\tpentestId\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xfc\x02\n" +
	"\vPentestData\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12'\n" +
	"\x06status\x18\x02 \x01(\x0e2\x0f.pentest.StatusR\x06status\x12\"\n" +
	"\n" +
	"created_at\x18\x03 \x01(\tH\x00R\tcreatedAt\x88\x01\x01\x12\"\n" +
	"\n" +
	"started_at\x18\x04 \x01(\tH\x01R\tstartedAt\x88\x01\x01\x12$\n" +
	"\vfinished_at\x18\x05 \x01(\tH\x02R\n" +
	"finishedAt\x88\x01\x01\x12$\n" +
	"\x05style\x18\x06 \x01(\x0e2\x0e.pentest.StyleR\x05style\x12\x18\n" +
	"\aexploit\x18\a \x01(\bR\aexploit\x12\x1d\n" +
	"\asummary\x18\b \x01(\tH\x03R\asummary\x88\x01\x01\x12-\n" +
	"\atargets\x18\t \x03(\v2\x13.pentest.TargetDataR\atargetsB\r\n" +
	"\v_created_atB\r\n" +
	"\v_started_atB\x0e\n" +
	"\f_finished_atB\n" +
	"\n" +
	"\b_summary\"\xcd\x03\n" +
	"\n" +
	"TargetData\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1d\n" +
	"\n" +
	"pentest_id\x18\x02 \x01(\tR\tpentestId\x12\x16\n" +
	"\x06target\x18\x03 \x01(\tR\x06target\x12$\n" +
	"\x05scope\x18\x04 \x01(\x0e2\x0e.pentest.ScopeR\x05scope\x12!\n" +
	"\x04type\x18\x05 \x01(\x0e2\r.pentest.TypeR\x04type\x12'\n" +
	"\x06status\x18\x06 \x01(\x0e2\x0f.pentest.StatusR\x06status\x12)\n" +
	"\x05phase\x18\a \x01(\x0e2\x0e.pentest.PhaseH\x00R\x05phase\x88\x01\x01\x12\"\n" +
	"\n" +
	"created_at\x18\b \x01(\tH\x01R\tcreatedAt\x88\x01\x01\x12\"\n" +
	"\n" +
	"started_at\x18\t \x01(\tH\x02R\tstartedAt\x88\x01\x01\x12$\n" +
	"\vfinished_at\x18\n" +
	" \x01(\tH\x03R\n" +
	"finishedAt\x88\x01\x01\x12%\n" +
	"\vcredentials\x18\v \x01(\tH\x04R\vcredentials\x88\x01\x01B\b\n" +
	"\x06_phaseB\r\n" +
	"\v_created_atB\r\n" +
	"\v_started_atB\x0e\n" +
	"\f_finished_atB\x0e\n" +
	"\f_credentials\"\xb9\x01\n" +
	"\fStatusUpdate\x12'\n" +
	"\x04type\x18\x01 \x01(\x0e2\x13.pentest.UpdateTypeR\x04type\x12\x1d\n" +
	"\n" +
	"pentest_id\x18\x02 \x01(\tR\tpentestId\x12\x1d\n" +
	"\amessage\x18\x03 \x01(\tH\x00R\amessage\x88\x01\x01\x12-\n" +
	"\x04data\x18\x04 \x01(\v2\x14.pentest.PentestDataH\x01R\x04data\x88\x01\x01B\n" +
	"\n" +
	"\b_messageB\a\n" +
	"\x05_data\"?\n" +
	"\rErrorResponse\x12\x14\n" +
	"\x05error\x18\x01 \x01(\tR\x05error\x12\x18\n" +
	"\adetails\x18\x02 \x01(\tR\adetails*:\n" +
	"\x05Scope\x12\x15\n" +
	"\x11SCOPE_UNSPECIFIED\x10\x00\x12\f\n" +
	"\bHOLISTIC\x10\x01\x12\f\n" +
	"\bTARGETED\x10\x02*:\n" +
	"\x04Type\x12\x14\n" +
	"\x10TYPE_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tBLACK_BOX\x10\x01\x12\r\n" +
	"\tWHITE_BOX\x10\x02*8\n" +
	"\x05Style\x12\x15\n" +
	"\x11STYLE_UNSPECIFIED\x10\x00\x12\x0e\n" +
	"\n" +
	"AGGRESSIVE\x10\x01\x12\b\n" +
	"\x04SAFE\x10\x02*Y\n" +
	"\x06Status\x12\x16\n" +
	"\x12STATUS_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aPENDING\x10\x01\x12\x0f\n" +
	"\vIN_PROGRESS\x10\x02\x12\r\n" +
	"\tCOMPLETED\x10\x03\x12\n" +
	"\n" +
	"\x06FAILED\x10\x04*r\n" +
	"\x05Phase\x12\x15\n" +
	"\x11PHASE_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05RECON\x10\x01\x12\x13\n" +
	"\x0fINITIAL_EXPLOIT\x10\x02\x12\x10\n" +
	"\fDEEP_EXPLOIT\x10\x03\x12\x14\n" +
	"\x10LATERAL_MOVEMENT\x10\x04\x12\n" +
	"\n" +
	"\x06REPORT\x10\x05*U\n" +
	"\n" +
	"UpdateType\x12\x1b\n" +
	"\x17UPDATE_TYPE_UNSPECIFIED\x10\x00\x12\b\n" +
	"\x04INFO\x10\x01\x12\t\n" +
	"\x05ERROR\x10\x02\x12\n" +
	"\n" +
	"\x06STATUS\x10\x03\x12\t\n" +
	"\x05DEBUG\x10\x042V\n" +
	"\x0ePentestService\x12D\n" +
	"\rPentestStream\x12\x16.pentest.ClientRequest\x1a\x17.pentest.ServerResponse(\x010\x01B&Z$github.com/threatwinds/pt-client-sdkb\x06proto3"

var (
	file_pentest_proto_rawDescOnce sync.Once
	file_pentest_proto_rawDescData []byte
)

func file_pentest_proto_rawDescGZIP() []byte {
	file_pentest_proto_rawDescOnce.Do(func() {
		file_pentest_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pentest_proto_rawDesc), len(file_pentest_proto_rawDesc)))
	})
	return file_pentest_proto_rawDescData
}

var file_pentest_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_pentest_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_pentest_proto_goTypes = []any{
	(Scope)(0),                     // 0: pentest.Scope
	(Type)(0),                      // 1: pentest.Type
	(Style)(0),                     // 2: pentest.Style
	(Status)(0),                    // 3: pentest.Status
	(Phase)(0),                     // 4: pentest.Phase
	(UpdateType)(0),                // 5: pentest.UpdateType
	(*ClientRequest)(nil),          // 6: pentest.ClientRequest
	(*ServerResponse)(nil),         // 7: pentest.ServerResponse
	(*GetPentestRequest)(nil),      // 8: pentest.GetPentestRequest
	(*SchedulePentestRequest)(nil), // 9: pentest.SchedulePentestRequest
	(*TargetRequest)(nil),          // 10: pentest.TargetRequest
	(*ScheduleResponse)(nil),       // 11: pentest.ScheduleResponse
	(*PentestData)(nil),            // 12: pentest.PentestData
	(*TargetData)(nil),             // 13: pentest.TargetData
	(*StatusUpdate)(nil),           // 14: pentest.StatusUpdate
	(*ErrorResponse)(nil),          // 15: pentest.ErrorResponse
}
var file_pentest_proto_depIdxs = []int32{
	8,  // 0: pentest.ClientRequest.get_pentest:type_name -> pentest.GetPentestRequest
	9,  // 1: pentest.ClientRequest.schedule_pentest:type_name -> pentest.SchedulePentestRequest
	12, // 2: pentest.ServerResponse.pentest_data:type_name -> pentest.PentestData
	11, // 3: pentest.ServerResponse.schedule_response:type_name -> pentest.ScheduleResponse
	14, // 4: pentest.ServerResponse.status_update:type_name -> pentest.StatusUpdate
	15, // 5: pentest.ServerResponse.error:type_name -> pentest.ErrorResponse
	2,  // 6: pentest.SchedulePentestRequest.style:type_name -> pentest.Style
	10, // 7: pentest.SchedulePentestRequest.targets:type_name -> pentest.TargetRequest
	0,  // 8: pentest.TargetRequest.scope:type_name -> pentest.Scope
	1,  // 9: pentest.TargetRequest.type:type_name -> pentest.Type
	3,  // 10: pentest.PentestData.status:type_name -> pentest.Status
	2,  // 11: pentest.PentestData.style:type_name -> pentest.Style
	13, // 12: pentest.PentestData.targets:type_name -> pentest.TargetData
	0,  // 13: pentest.TargetData.scope:type_name -> pentest.Scope
	1,  // 14: pentest.TargetData.type:type_name -> pentest.Type
	3,  // 15: pentest.TargetData.status:type_name -> pentest.Status
	4,  // 16: pentest.TargetData.phase:type_name -> pentest.Phase
	5,  // 17: pentest.StatusUpdate.type:type_name -> pentest.UpdateType
	12, // 18: pentest.StatusUpdate.data:type_name -> pentest.PentestData
	6,  // 19: pentest.PentestService.PentestStream:input_type -> pentest.ClientRequest
	7,  // 20: pentest.PentestService.PentestStream:output_type -> pentest.ServerResponse
	20, // [20:21] is the sub-list for method output_type
	19, // [19:20] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_pentest_proto_init() }
func file_pentest_proto_init() {
	if File_pentest_proto != nil {
		return
	}
	file_pentest_proto_msgTypes[0].OneofWrappers = []any{
		(*ClientRequest_GetPentest)(nil),
		(*ClientRequest_SchedulePentest)(nil),
	}
	file_pentest_proto_msgTypes[1].OneofWrappers = []any{
		(*ServerResponse_PentestData)(nil),
		(*ServerResponse_ScheduleResponse)(nil),
		(*ServerResponse_StatusUpdate)(nil),
		(*ServerResponse_Error)(nil),
	}
	file_pentest_proto_msgTypes[3].OneofWrappers = []any{}
	file_pentest_proto_msgTypes[4].OneofWrappers = []any{}
	file_pentest_proto_msgTypes[6].OneofWrappers = []any{}
	file_pentest_proto_msgTypes[7].OneofWrappers = []any{}
	file_pentest_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pentest_proto_rawDesc), len(file_pentest_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pentest_proto_goTypes,
		DependencyIndexes: file_pentest_proto_depIdxs,
		EnumInfos:         file_pentest_proto_enumTypes,
		MessageInfos:      file_pentest_proto_msgTypes,
	}.Build()
	File_pentest_proto = out.File
	file_pentest_proto_goTypes = nil
	file_pentest_proto_depIdxs = nil
}
