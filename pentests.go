package twpt_client_sdk

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/threatwinds/go-sdk/utils"
)

func (c *Client) ListPentests(ctx context.Context, pagination PaginationParams) (*PentestListResponse, error) {
	url := fmt.Sprintf("%s/api/v1/pentests?page=%d&page_size=%d", c.BaseURL, pagination.Page, pagination.PageSize)

	headers := map[string]string{
		"accept":     "application/json",
		"api-key":    c.Credentials.APIKey,
		"api-secret": c.Credentials.APISecret,
	}

	result, statusCode, err := utils.DoReq[PentestListResponse](url, nil, "GET", headers)
	if err != nil {
		return nil, fmt.Errorf("failed to list pentests: %w", err)
	}

	if statusCode != http.StatusOK {
		return nil, fmt.Errorf("unexpected status code: %d", statusCode)
	}

	return &result, nil
}

func (c *Client) GetPentest(ctx context.Context, pentestID string) (*Pentest, error) {
	url := fmt.Sprintf("%s/api/v1/pentests/%s", c.BaseURL, pentestID)

	headers := map[string]string{
		"accept":     "application/json",
		"api-key":    c.Credentials.APIKey,
		"api-secret": c.Credentials.APISecret,
	}

	result, statusCode, err := utils.DoReq[Pentest](url, nil, "GET", headers)
	if err != nil {
		return nil, fmt.Errorf("failed to get pentest: %w", err)
	}

	if statusCode == http.StatusNotFound {
		return nil, fmt.Errorf("pentest %s not found", pentestID)
	}

	if statusCode != http.StatusOK {
		return nil, fmt.Errorf("unexpected status code: %d", statusCode)
	}

	return &result, nil
}

func (c *Client) SchedulePentest(ctx context.Context, pentest Pentest) (string, error) {
	url := fmt.Sprintf("%s/api/v1/pentests/schedule", c.BaseURL)

	headers := map[string]string{
		"accept":       "application/json",
		"content-type": "application/json",
		"api-key":      c.Credentials.APIKey,
		"api-secret":   c.Credentials.APISecret,
	}

	body := SchedulePentestRequest{Pentest: pentest}
	bodyJson, err := json.Marshal(body)
	if err != nil {
		return "", fmt.Errorf("failed to marshal request body: %w", err)
	}

	result, statusCode, err := utils.DoReq[SchedulePentestResponse](url, bodyJson, "POST", headers)
	if err != nil {
		return "", fmt.Errorf("failed to schedule pentest: %w", err)
	}

	if statusCode != http.StatusOK && statusCode != http.StatusCreated {
		return "", fmt.Errorf("unexpected status code: %d", statusCode)
	}

	return result.PentestID, nil
}

func (c *Client) SubscribePentest(ctx context.Context, pentestID string) (*PentestSubscription, error) {

	updates := make(chan Pentest)
	messages := make(chan string)
	errors := make(chan error)

	close(updates)
	close(messages)
	close(errors)

	return &PentestSubscription{
		Updates:  updates,
		Messages: messages,
		Errors:   errors,
	}, fmt.Errorf("not implemented")
}

func (c *Client) DownloadReport(ctx context.Context, pentestID string, format ReportFormat, outputDir string) error {
	return fmt.Errorf("not implemented")
}
