syntax = "proto3";

package pentest;

option go_package = "github.com/threatwinds/pt-client-sdk";

// Enums
enum Scope {
  SCOPE_UNSPECIFIED = 0;
  HOLISTIC = 1;
  TARGETED = 2;
}

enum Type {
  TYPE_UNSPECIFIED = 0;
  BLACK_BOX = 1;
  WHITE_BOX = 2;
}

enum Style {
  STYLE_UNSPECIFIED = 0;
  AGGRESSIVE = 1;
  SAFE = 2;
}

enum Status {
  STATUS_UNSPECIFIED = 0;
  PENDING = 1;
  IN_PROGRESS = 2;
  COMPLETED = 3;
  FAILED = 4;
}

enum Phase {
  PHASE_UNSPECIFIED = 0;
  RECON = 1;
  INITIAL_EXPLOIT = 2;
  DEEP_EXPLOIT = 3;
  LATERAL_MOVEMENT = 4;
  REPORT = 5;
}

enum UpdateType {
  UPDATE_TYPE_UNSPECIFIED = 0;
  INFO = 1;
  ERROR = 2;
  STATUS = 3;
  DEBUG = 4;
}

// Request messages sent by client
message ClientRequest {
  oneof request_type {
    GetPentestRequest get_pentest = 1;
    SchedulePentestRequest schedule_pentest = 2;
  }
}

// Response messages sent by server
message ServerResponse {
  oneof response_type {
    PentestData pentest_data = 1;
    ScheduleResponse schedule_response = 2;
    StatusUpdate status_update = 3;
    ErrorResponse error = 5;
  }
}

// Get pentest by ID
message GetPentestRequest {
  string pentest_id = 1;
}

// Schedule a new pentest
message SchedulePentestRequest {
  optional string id = 1;
  Style style = 2;
  bool exploit = 3;
  repeated TargetRequest targets = 4;
}

message TargetRequest {
  optional string id = 1;
  string target = 2;
  Scope scope = 3;
  Type type = 4;
  optional string credentials = 5;
}

// Schedule response
message ScheduleResponse {
  string pentest_id = 1;
  string message = 2;
}

// Pentest data (full pentest object)
message PentestData {
  string id = 1;
  Status status = 2;
  optional string created_at = 3;
  optional string started_at = 4;
  optional string finished_at = 5;
  Style style = 6;
  bool exploit = 7;
  optional string summary = 8;
  repeated TargetData targets = 9;
}

message TargetData {
  string id = 1;
  string pentest_id = 2;
  string target = 3;
  Scope scope = 4;
  Type type = 5;
  Status status = 6;
  optional Phase phase = 7;
  optional string created_at = 8;
  optional string started_at = 9;
  optional string finished_at = 10;
  optional string credentials = 11;
}

// Status update (broadcasted when pentest/target status changes)
message StatusUpdate {
  UpdateType type = 1;
  string pentest_id = 2;
  optional string message = 3;
  optional PentestData data = 4;
}

// Error response
message ErrorResponse {
  string error = 1;
  string details = 2;
}

// Bidirectional streaming service
service PentestService {
  rpc PentestStream(stream ClientRequest) returns (stream ServerResponse);
}
